package cpu

var (
	Opcodes [256]Instruction
)

func init() {
	for _, instr := range instructionTable {
		Opcodes[instr.Opcode] = instr
	}
}

type Instruction struct {
	handler func(*CPU, Memory, operand)

	Name     string
	Opcode   uint8
	AddrMode AddrMode
	Size     int
	Cycles   int
}

var instructionTable = []Instruction{
	// Official opcodes.
	{nop, "NOP", 0xEA, AddrModeImp, 1, 2},
	{brk, "BRK", 0x00, AddrModeImp, 2, 7},
	{lda, "LDA", 0xA9, AddrModeImm, 2, 2},
	{lda, "LDA", 0xA5, AddrModeZp, 2, 3},
	{lda, "LDA", 0xB5, AddrModeZpX, 2, 4},
	{lda, "LDA", 0xAD, AddrModeAbs, 3, 4},
	{lda, "LDA", 0xBD, AddrModeAbsX, 3, 4},
	{lda, "LDA", 0xB9, AddrModeAbsY, 3, 4},
	{lda, "LDA", 0xA1, AddrModeIndX, 2, 6},
	{lda, "LDA", 0xB1, AddrModeIndY, 2, 5},
	{sta, "STA", 0x85, AddrModeZp, 2, 3},
	{sta, "STA", 0x95, AddrModeZpX, 2, 4},
	{sta, "STA", 0x8D, AddrModeAbs, 3, 4},
	{sta, "STA", 0x9D, AddrModeAbsX, 3, 5},
	{sta, "STA", 0x99, AddrModeAbsY, 3, 5},
	{sta, "STA", 0x81, AddrModeIndX, 2, 6},
	{sta, "STA", 0x91, AddrModeIndY, 2, 6},
	{ldx, "LDX", 0xA2, AddrModeImm, 2, 2},
	{ldx, "LDX", 0xA6, AddrModeZp, 2, 3},
	{ldx, "LDX", 0xB6, AddrModeZpY, 2, 4},
	{ldx, "LDX", 0xAE, AddrModeAbs, 3, 4},
	{ldx, "LDX", 0xBE, AddrModeAbsY, 3, 4},
	{stx, "STX", 0x86, AddrModeZp, 2, 3},
	{stx, "STX", 0x96, AddrModeZpY, 2, 4},
	{stx, "STX", 0x8E, AddrModeAbs, 3, 4},
	{ldy, "LDY", 0xA0, AddrModeImm, 2, 2},
	{ldy, "LDY", 0xA4, AddrModeZp, 2, 3},
	{ldy, "LDY", 0xB4, AddrModeZpX, 2, 4},
	{ldy, "LDY", 0xAC, AddrModeAbs, 3, 4},
	{ldy, "LDY", 0xBC, AddrModeAbsX, 3, 4},
	{sty, "STY", 0x84, AddrModeZp, 2, 3},
	{sty, "STY", 0x94, AddrModeZpX, 2, 4},
	{sty, "STY", 0x8C, AddrModeAbs, 3, 4},
	{tax, "TAX", 0xAA, AddrModeImp, 1, 2},
	{tay, "TAY", 0xA8, AddrModeImp, 1, 2},
	{txa, "TXA", 0x8A, AddrModeImp, 1, 2},
	{tya, "TYA", 0x98, AddrModeImp, 1, 2},
	{tsx, "TSX", 0xBA, AddrModeImp, 1, 2},
	{txs, "TXS", 0x9A, AddrModeImp, 1, 2},
	{pha, "PHA", 0x48, AddrModeImp, 1, 3},
	{php, "PHP", 0x08, AddrModeImp, 1, 3},
	{pla, "PLA", 0x68, AddrModeImp, 1, 4},
	{plp, "PLP", 0x28, AddrModeImp, 1, 4},
	{adc, "ADC", 0x69, AddrModeImm, 2, 2},
	{adc, "ADC", 0x65, AddrModeZp, 2, 3},
	{adc, "ADC", 0x75, AddrModeZpX, 2, 4},
	{adc, "ADC", 0x6D, AddrModeAbs, 3, 4},
	{adc, "ADC", 0x7D, AddrModeAbsX, 3, 4},
	{adc, "ADC", 0x79, AddrModeAbsY, 3, 4},
	{adc, "ADC", 0x61, AddrModeIndX, 2, 6},
	{adc, "ADC", 0x71, AddrModeIndY, 2, 5},
	{sbc, "SBC", 0xE9, AddrModeImm, 2, 2},
	{sbc, "SBC", 0xE5, AddrModeZp, 2, 3},
	{sbc, "SBC", 0xF5, AddrModeZpX, 2, 4},
	{sbc, "SBC", 0xED, AddrModeAbs, 3, 4},
	{sbc, "SBC", 0xFD, AddrModeAbsX, 3, 4},
	{sbc, "SBC", 0xF9, AddrModeAbsY, 3, 4},
	{sbc, "SBC", 0xE1, AddrModeIndX, 2, 6},
	{sbc, "SBC", 0xF1, AddrModeIndY, 2, 5},
	{and, "AND", 0x29, AddrModeImm, 2, 2},
	{and, "AND", 0x25, AddrModeZp, 2, 3},
	{and, "AND", 0x35, AddrModeZpX, 2, 4},
	{and, "AND", 0x2D, AddrModeAbs, 3, 4},
	{and, "AND", 0x3D, AddrModeAbsX, 3, 4},
	{and, "AND", 0x39, AddrModeAbsY, 3, 4},
	{and, "AND", 0x21, AddrModeIndX, 2, 6},
	{and, "AND", 0x31, AddrModeIndY, 2, 5},
	{ora, "ORA", 0x09, AddrModeImm, 2, 2},
	{ora, "ORA", 0x05, AddrModeZp, 2, 3},
	{ora, "ORA", 0x15, AddrModeZpX, 2, 4},
	{ora, "ORA", 0x0D, AddrModeAbs, 3, 4},
	{ora, "ORA", 0x1D, AddrModeAbsX, 3, 4},
	{ora, "ORA", 0x19, AddrModeAbsY, 3, 4},
	{ora, "ORA", 0x01, AddrModeIndX, 2, 6},
	{ora, "ORA", 0x11, AddrModeIndY, 2, 5},
	{eor, "EOR", 0x49, AddrModeImm, 2, 2},
	{eor, "EOR", 0x45, AddrModeZp, 2, 3},
	{eor, "EOR", 0x55, AddrModeZpX, 2, 4},
	{eor, "EOR", 0x4D, AddrModeAbs, 3, 4},
	{eor, "EOR", 0x5D, AddrModeAbsX, 3, 4},
	{eor, "EOR", 0x59, AddrModeAbsY, 3, 4},
	{eor, "EOR", 0x41, AddrModeIndX, 2, 6},
	{eor, "EOR", 0x51, AddrModeIndY, 2, 5},
	{cmp, "CMP", 0xC9, AddrModeImm, 2, 2},
	{cmp, "CMP", 0xC5, AddrModeZp, 2, 3},
	{cmp, "CMP", 0xD5, AddrModeZpX, 2, 4},
	{cmp, "CMP", 0xCD, AddrModeAbs, 3, 4},
	{cmp, "CMP", 0xDD, AddrModeAbsX, 3, 4},
	{cmp, "CMP", 0xD9, AddrModeAbsY, 3, 4},
	{cmp, "CMP", 0xC1, AddrModeIndX, 2, 6},
	{cmp, "CMP", 0xD1, AddrModeIndY, 2, 5},
	{cpx, "CPX", 0xE0, AddrModeImm, 2, 2},
	{cpx, "CPX", 0xE4, AddrModeZp, 2, 3},
	{cpx, "CPX", 0xEC, AddrModeAbs, 3, 4},
	{cpy, "CPY", 0xC0, AddrModeImm, 2, 2},
	{cpy, "CPY", 0xC4, AddrModeZp, 2, 3},
	{cpy, "CPY", 0xCC, AddrModeAbs, 3, 4},
	{bit, "BIT", 0x24, AddrModeZp, 2, 3},
	{bit, "BIT", 0x2C, AddrModeAbs, 3, 4},
	{asl, "ASL", 0x0A, AddrModeAcc, 1, 2},
	{asl, "ASL", 0x06, AddrModeZp, 2, 5},
	{asl, "ASL", 0x16, AddrModeZpX, 2, 6},
	{asl, "ASL", 0x0E, AddrModeAbs, 3, 6},
	{asl, "ASL", 0x1E, AddrModeAbsX, 3, 7},
	{lsr, "LSR", 0x4A, AddrModeAcc, 1, 2},
	{lsr, "LSR", 0x46, AddrModeZp, 2, 5},
	{lsr, "LSR", 0x56, AddrModeZpX, 2, 6},
	{lsr, "LSR", 0x4E, AddrModeAbs, 3, 6},
	{lsr, "LSR", 0x5E, AddrModeAbsX, 3, 7},
	{rol, "ROL", 0x2A, AddrModeAcc, 1, 2},
	{rol, "ROL", 0x26, AddrModeZp, 2, 5},
	{rol, "ROL", 0x36, AddrModeZpX, 2, 6},
	{rol, "ROL", 0x2E, AddrModeAbs, 3, 6},
	{rol, "ROL", 0x3E, AddrModeAbsX, 3, 7},
	{ror, "ROR", 0x6A, AddrModeAcc, 1, 2},
	{ror, "ROR", 0x66, AddrModeZp, 2, 5},
	{ror, "ROR", 0x76, AddrModeZpX, 2, 6},
	{ror, "ROR", 0x6E, AddrModeAbs, 3, 6},
	{ror, "ROR", 0x7E, AddrModeAbsX, 3, 7},
	{inc, "INC", 0xE6, AddrModeZp, 2, 5},
	{inc, "INC", 0xF6, AddrModeZpX, 2, 6},
	{inc, "INC", 0xEE, AddrModeAbs, 3, 6},
	{inc, "INC", 0xFE, AddrModeAbsX, 3, 7},
	{inx, "INX", 0xE8, AddrModeImp, 1, 2},
	{iny, "INY", 0xC8, AddrModeImp, 1, 2},
	{dex, "DEX", 0xCA, AddrModeImp, 1, 2},
	{dey, "DEY", 0x88, AddrModeImp, 1, 2},
	{dec, "DEC", 0xC6, AddrModeZp, 2, 5},
	{dec, "DEC", 0xD6, AddrModeZpX, 2, 6},
	{dec, "DEC", 0xCE, AddrModeAbs, 3, 6},
	{dec, "DEC", 0xDE, AddrModeAbsX, 3, 7},
	{jmp, "JMP", 0x4C, AddrModeAbs, 3, 3},
	{jmp, "JMP", 0x6C, AddrModeInd, 3, 5},
	{jsr, "JSR", 0x20, AddrModeAbs, 3, 6},
	{rts, "RTS", 0x60, AddrModeImp, 1, 6},
	{rti, "RTI", 0x40, AddrModeImp, 1, 6},
	{bpl, "BPL", 0x10, AddrModeRel, 2, 2},
	{bmi, "BMI", 0x30, AddrModeRel, 2, 2},
	{bvc, "BVC", 0x50, AddrModeRel, 2, 2},
	{bvs, "BVS", 0x70, AddrModeRel, 2, 2},
	{bcc, "BCC", 0x90, AddrModeRel, 2, 2},
	{bcs, "BCS", 0xB0, AddrModeRel, 2, 2},
	{bne, "BNE", 0xD0, AddrModeRel, 2, 2},
	{beq, "BEQ", 0xF0, AddrModeRel, 2, 2},
	{sec, "SEC", 0x38, AddrModeImp, 1, 2},
	{sei, "SEI", 0x78, AddrModeImp, 1, 2},
	{clc, "CLC", 0x18, AddrModeImp, 1, 2},
	{sed, "SED", 0xF8, AddrModeImp, 1, 2},
	{cli, "CLI", 0x58, AddrModeImp, 1, 2},
	{clv, "CLV", 0xB8, AddrModeImp, 1, 2},
	{cld, "CLD", 0xD8, AddrModeImp, 1, 2},

	// The unofficial opcodes, used by some games and nestest.
	// https://www.masswerk.at/nowgobang/2021/6502-illegal-opcodes
	{xsbc, "*SBC", 0xEB, AddrModeImm, 2, 2},
	{xdcp, "*DCP", 0xC7, AddrModeZp, 2, 5},
	{xdcp, "*DCP", 0xD7, AddrModeZpX, 2, 6},
	{xdcp, "*DCP", 0xCF, AddrModeAbs, 3, 6},
	{xdcp, "*DCP", 0xDF, AddrModeAbsX, 3, 7},
	{xdcp, "*DCP", 0xDB, AddrModeAbsY, 3, 7},
	{xdcp, "*DCP", 0xC3, AddrModeIndX, 2, 8},
	{xdcp, "*DCP", 0xD3, AddrModeIndY, 2, 8},
	{xlax, "*LAX", 0xA7, AddrModeZp, 2, 3},
	{xlax, "*LAX", 0xB7, AddrModeZpY, 2, 4},
	{xlax, "*LAX", 0xAF, AddrModeAbs, 3, 4},
	{xlax, "*LAX", 0xBF, AddrModeAbsY, 3, 4}, // +1 if page crossed
	{xlax, "*LAX", 0xA3, AddrModeIndX, 2, 6},
	{xlax, "*LAX", 0xB3, AddrModeIndY, 2, 5}, // +1 if page crossed
	{xnop, "*NOP", 0x1A, AddrModeImp, 1, 2},
	{xnop, "*NOP", 0x3A, AddrModeImp, 1, 2},
	{xnop, "*NOP", 0x5A, AddrModeImp, 1, 2},
	{xnop, "*NOP", 0x7A, AddrModeImp, 1, 2},
	{xnop, "*NOP", 0xDA, AddrModeImp, 1, 2},
	{xnop, "*NOP", 0xFA, AddrModeImp, 1, 2},
	{xnop, "*NOP", 0x80, AddrModeImm, 2, 2},
	{xnop, "*NOP", 0x82, AddrModeImm, 2, 2},
	{xnop, "*NOP", 0x89, AddrModeImm, 2, 2},
	{xnop, "*NOP", 0xC2, AddrModeImm, 2, 2},
	{xnop, "*NOP", 0xE2, AddrModeImm, 2, 2},
	{xnop, "*NOP", 0x04, AddrModeZp, 2, 3},
	{xnop, "*NOP", 0x44, AddrModeZp, 2, 3},
	{xnop, "*NOP", 0x64, AddrModeZp, 2, 3},
	{xnop, "*NOP", 0x14, AddrModeZpX, 2, 4},
	{xnop, "*NOP", 0x34, AddrModeZpX, 2, 4},
	{xnop, "*NOP", 0x54, AddrModeZpX, 2, 4},
	{xnop, "*NOP", 0x74, AddrModeZpX, 2, 4},
	{xnop, "*NOP", 0xD4, AddrModeZpX, 2, 4},
	{xnop, "*NOP", 0xF4, AddrModeZpX, 2, 4},
	{xnop, "*NOP", 0x0C, AddrModeAbs, 3, 4},
	{xnop, "*NOP", 0x1C, AddrModeAbsX, 3, 4}, // +1 if page crossed
	{xnop, "*NOP", 0x3C, AddrModeAbsX, 3, 4}, // +1 if page crossed
	{xnop, "*NOP", 0x5C, AddrModeAbsX, 3, 4}, // +1 if page crossed
	{xnop, "*NOP", 0x7C, AddrModeAbsX, 3, 4}, // +1 if page crossed
	{xnop, "*NOP", 0xDC, AddrModeAbsX, 3, 4}, // +1 if page crossed
	{xnop, "*NOP", 0xFC, AddrModeAbsX, 3, 4}, // +1 if page crossed
	{xrla, "*RLA", 0x27, AddrModeZp, 2, 5},
	{xrla, "*RLA", 0x37, AddrModeZpX, 2, 6},
	{xrla, "*RLA", 0x2F, AddrModeAbs, 3, 6},
	{xrla, "*RLA", 0x3F, AddrModeAbsX, 3, 7},
	{xrla, "*RLA", 0x3B, AddrModeAbsY, 3, 7},
	{xrla, "*RLA", 0x23, AddrModeIndX, 2, 8},
	{xrla, "*RLA", 0x33, AddrModeIndY, 2, 8},
	{xrra, "*RRA", 0x67, AddrModeZp, 2, 5},
	{xrra, "*RRA", 0x77, AddrModeZpX, 2, 6},
	{xrra, "*RRA", 0x6F, AddrModeAbs, 3, 6},
	{xrra, "*RRA", 0x7F, AddrModeAbsX, 3, 7},
	{xrra, "*RRA", 0x7B, AddrModeAbsY, 3, 7},
	{xrra, "*RRA", 0x63, AddrModeIndX, 2, 8},
	{xrra, "*RRA", 0x73, AddrModeIndY, 2, 8},
	{xsax, "*SAX", 0x87, AddrModeZp, 2, 3},
	{xsax, "*SAX", 0x97, AddrModeZpY, 2, 4},
	{xsax, "*SAX", 0x8F, AddrModeAbs, 3, 4},
	{xsax, "*SAX", 0x83, AddrModeIndX, 2, 6},
	{xslo, "*SLO", 0x07, AddrModeZp, 2, 5},
	{xslo, "*SLO", 0x17, AddrModeZpX, 2, 6},
	{xslo, "*SLO", 0x0F, AddrModeAbs, 3, 6},
	{xslo, "*SLO", 0x1F, AddrModeAbsX, 3, 7},
	{xslo, "*SLO", 0x1B, AddrModeAbsY, 3, 7},
	{xslo, "*SLO", 0x03, AddrModeIndX, 2, 8},
	{xslo, "*SLO", 0x13, AddrModeIndY, 2, 8},
	{xsre, "*SRE", 0x47, AddrModeZp, 2, 5},
	{xsre, "*SRE", 0x57, AddrModeZpX, 2, 6},
	{xsre, "*SRE", 0x4F, AddrModeAbs, 3, 6},
	{xsre, "*SRE", 0x5F, AddrModeAbsX, 3, 7},
	{xsre, "*SRE", 0x5B, AddrModeAbsY, 3, 7},
	{xsre, "*SRE", 0x43, AddrModeIndX, 2, 8},
	{xsre, "*SRE", 0x53, AddrModeIndY, 2, 8},
	{xisb, "*ISB", 0xE7, AddrModeZp, 2, 5},
	{xisb, "*ISB", 0xF7, AddrModeZpX, 2, 6},
	{xisb, "*ISB", 0xEF, AddrModeAbs, 3, 6},
	{xisb, "*ISB", 0xFF, AddrModeAbsX, 3, 7},
	{xisb, "*ISB", 0xFB, AddrModeAbsY, 3, 7},
	{xisb, "*ISB", 0xE3, AddrModeIndX, 2, 8},
	{xisb, "*ISB", 0xF3, AddrModeIndY, 2, 8},

	// The rest of the illegal opcodes are not emulated, but are
	// included here for disassembly just in case.
	{xnop, "???", 0x0B, AddrModeImm, 2, 2},
	{xnop, "???", 0x2B, AddrModeImm, 2, 2},
	{xnop, "???", 0x4B, AddrModeImm, 2, 2},
	{xnop, "???", 0x6B, AddrModeImm, 2, 2},
	{xnop, "???", 0x8B, AddrModeImm, 2, 2},
	{xnop, "???", 0xBB, AddrModeImm, 2, 2},
	{xnop, "???", 0xAB, AddrModeImm, 2, 2},
	{xnop, "???", 0xCB, AddrModeImm, 2, 2},
	{xnop, "???", 0x9F, AddrModeAbsX, 3, 5},
	{xnop, "???", 0x93, AddrModeIndY, 2, 6},
	{xnop, "???", 0x9E, AddrModeAbsY, 3, 5},
	{xnop, "???", 0x9C, AddrModeAbs, 3, 5},
	{xnop, "???", 0x9B, AddrModeImm, 2, 2},
}
